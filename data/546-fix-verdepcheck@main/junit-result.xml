<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="assert_data" timestamp="2024-06-06T11:17:04Z" hostname="9b9e5411fcaa" tests="31" skipped="0" failures="0" errors="0" time="0.402">
    <testcase time="0.014" classname="assert_data" name="h_assert_one_rec_pt_visit_passes_as_expected_if_data_is_ok"/>
    <testcase time="0.0370000000000001" classname="assert_data" name="h_assert_one_rec_pt_visit_fails_as_expected_if_data_is_wrong"/>
    <testcase time="0.0069999999999999" classname="assert_data" name="h_assert_one_rec_pt_visit_fails_as_expected_if_data_is_wrong"/>
    <testcase time="0.0130000000000001" classname="assert_data" name="h_assert_one_rec_pt_visit_works_with_just_one_patient_and_one_visit"/>
    <testcase time="0.00600000000000001" classname="assert_data" name="h_assert_rsp_var_works_as_expected"/>
    <testcase time="0.00600000000000001" classname="assert_data" name="h_assert_rsp_var_works_as_expected"/>
    <testcase time="0.00600000000000001" classname="assert_data" name="h_assert_rsp_var_works_as_expected"/>
    <testcase time="0.00600000000000001" classname="assert_data" name="h_assert_visit_var_works_as_expected"/>
    <testcase time="0.00600000000000001" classname="assert_data" name="h_assert_visit_var_works_as_expected"/>
    <testcase time="0.0179999999999998" classname="assert_data" name="h_assert_visit_var_works_as_expected"/>
    <testcase time="0.00500000000000012" classname="assert_data" name="h_assert_id_var_works_as_expected"/>
    <testcase time="0.002" classname="assert_data" name="h_assert_id_var_works_as_expected"/>
    <testcase time="0.004" classname="assert_data" name="h_assert_id_var_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="assert_data" name="h_assert_id_var_works_as_expected"/>
    <testcase time="0.00500000000000012" classname="assert_data" name="h_assert_weights_var_works_as_expected"/>
    <testcase time="0.004" classname="assert_data" name="h_assert_weights_var_works_as_expected"/>
    <testcase time="0.00499999999999989" classname="assert_data" name="h_assert_weights_var_works_as_expected"/>
    <testcase time="0.00500000000000012" classname="assert_data" name="h_assert_weights_var_works_as_expected"/>
    <testcase time="0.00600000000000001" classname="assert_data" name="h_assert_data_passes_as_expected"/>
    <testcase time="0.00600000000000001" classname="assert_data" name="h_assert_data_does_not_look_at_rows_with_incomplete_regressors_for_checking_duplicates"/>
    <testcase time="0.0089999999999999" classname="assert_data" name="h_assert_data_fails_when_less_than_5_rows_in_complete_data_set_without_arm"/>
    <testcase time="0.01" classname="assert_data" name="h_assert_data_fails_when_less_than_5_rows_in_complete_data_set_per_arm"/>
    <testcase time="0.0760000000000001" classname="assert_data" name="h_assert_data_works_with_interaction_terms_in_covariates_"/>
    <testcase time="0.085" classname="assert_data" name="h_assert_data_works_when_there_are_missing_values"/>
    <testcase time="0.00800000000000001" classname="assert_data" name="h_assert_data_fails_if_a_variable_is_missing"/>
    <testcase time="0.00499999999999989" classname="assert_data" name="h_assert_data_fails_if_a_variable_is_missing"/>
    <testcase time="0.00500000000000034" classname="assert_data" name="h_assert_data_fails_if_a_variable_is_missing"/>
    <testcase time="0.0139999999999998" classname="assert_data" name="h_assert_data_fails_if_a_variable_is_not_included_in_data_"/>
    <testcase time="0.00800000000000001" classname="assert_data" name="h_assert_data_fails_if_a_variable_is_not_included_in_data_"/>
    <testcase time="0.00800000000000001" classname="assert_data" name="h_assert_data_fails_if_a_variable_is_not_included_in_data_"/>
    <testcase time="0.00800000000000001" classname="assert_data" name="h_assert_data_fails_if_a_variable_is_not_included_in_data_"/>
  </testsuite>
  <testsuite name="fit_mmrm" timestamp="2024-06-06T11:17:04Z" hostname="9b9e5411fcaa" tests="40" skipped="0" failures="0" errors="0" time="3.925">
    <testcase time="0.069" classname="fit_mmrm" name="h_get_diagnostics_works_as_expected"/>
    <testcase time="0.327" classname="fit_mmrm" name="fit_mmrm_works_with_parallelization"/>
    <testcase time="0.213" classname="fit_mmrm" name="fit_mmrm_can_specify_multiple_optimizers_to_try"/>
    <testcase time="0.004" classname="fit_mmrm" name="fit_mmrm_can_specify_multiple_optimizers_to_try"/>
    <testcase time="0.307" classname="fit_mmrm" name="fit_mmrm_can_specify_adjustment_method"/>
    <testcase time="0.00300000000000011" classname="fit_mmrm" name="fit_mmrm_can_specify_adjustment_method"/>
    <testcase time="0.00199999999999978" classname="fit_mmrm" name="fit_mmrm_can_specify_adjustment_method"/>
    <testcase time="0.177" classname="fit_mmrm" name="fit_mmrm_works_with_character_ID_variable"/>
    <testcase time="0.202" classname="fit_mmrm" name="fit_mmrm_works_with_character_ID_variable"/>
    <testcase time="0.216" classname="fit_mmrm" name="fit_mmrm_works_with_unstructured_covariance_matrix_and_produces_same_results_as_SAS"/>
    <testcase time="0.0190000000000001" classname="fit_mmrm" name="fit_mmrm_works_with_unstructured_covariance_matrix_and_produces_same_results_as_SAS"/>
    <testcase time="0.004" classname="fit_mmrm" name="fit_mmrm_works_with_unstructured_covariance_matrix_and_produces_same_results_as_SAS"/>
    <testcase time="0.004" classname="fit_mmrm" name="fit_mmrm_works_with_unstructured_covariance_matrix_and_produces_same_results_as_SAS"/>
    <testcase time="0.00800000000000001" classname="fit_mmrm" name="fit_mmrm_works_with_unstructured_covariance_matrix_and_produces_same_results_as_SAS"/>
    <testcase time="0.0179999999999998" classname="fit_mmrm" name="fit_mmrm_works_with_unstructured_covariance_matrix_and_produces_same_results_as_SAS"/>
    <testcase time="0.00300000000000011" classname="fit_mmrm" name="fit_mmrm_works_with_unstructured_covariance_matrix_and_produces_same_results_as_SAS"/>
    <testcase time="0.00199999999999978" classname="fit_mmrm" name="fit_mmrm_works_with_unstructured_covariance_matrix_and_produces_same_results_as_SAS"/>
    <testcase time="0.00300000000000011" classname="fit_mmrm" name="fit_mmrm_works_with_unstructured_covariance_matrix_and_produces_same_results_as_SAS"/>
    <testcase time="0.00300000000000011" classname="fit_mmrm" name="fit_mmrm_works_with_unstructured_covariance_matrix_and_produces_same_results_as_SAS"/>
    <testcase time="0.186" classname="fit_mmrm" name="fit_mmrm_works_also_with_missing_data"/>
    <testcase time="0.0169999999999999" classname="fit_mmrm" name="fit_mmrm_works_also_with_missing_data"/>
    <testcase time="0.00499999999999989" classname="fit_mmrm" name="fit_mmrm_works_also_with_missing_data"/>
    <testcase time="0.00300000000000011" classname="fit_mmrm" name="fit_mmrm_works_also_with_missing_data"/>
    <testcase time="0.0170000000000003" classname="fit_mmrm" name="fit_mmrm_works_also_with_missing_data"/>
    <testcase time="0.0110000000000001" classname="fit_mmrm" name="fit_mmrm_works_also_with_missing_data"/>
    <testcase time="0.00299999999999923" classname="fit_mmrm" name="fit_mmrm_works_also_with_missing_data"/>
    <testcase time="0.00300000000000011" classname="fit_mmrm" name="fit_mmrm_works_also_with_missing_data"/>
    <testcase time="0.00300000000000011" classname="fit_mmrm" name="fit_mmrm_works_also_with_missing_data"/>
    <testcase time="0.00300000000000011" classname="fit_mmrm" name="fit_mmrm_works_also_with_missing_data"/>
    <testcase time="0.233" classname="fit_mmrm" name="fit_mmrm_works_also_with_rank_deficient_model_matrix"/>
    <testcase time="0.201000000000001" classname="fit_mmrm" name="fit_mmrm_works_also_with_weights"/>
    <testcase time="0.00399999999999956" classname="fit_mmrm" name="fit_mmrm_works_also_with_weights"/>
    <testcase time="0.205" classname="fit_mmrm" name="fit_mmrm_works_with_homogeneous_toeplitz_covariance_matrix"/>
    <testcase time="0.204000000000001" classname="fit_mmrm" name="fit_mmrm_works_with_heterogeneous_toeplitz_covariance_matrix"/>
    <testcase time="0.207" classname="fit_mmrm" name="fit_mmrm_works_with_homogeneous_ante_dependence_covariance_matrix"/>
    <testcase time="0.210999999999999" classname="fit_mmrm" name="fit_mmrm_works_with_heterogeneous_ante_dependence_covariance_matrix"/>
    <testcase time="0.19" classname="fit_mmrm" name="fit_mmrm_works_with_homogeneous_auto_regressive_covariance_matrix"/>
    <testcase time="0.194" classname="fit_mmrm" name="fit_mmrm_works_with_heterogeneous_auto_regressive_covariance_matrix"/>
    <testcase time="0.22" classname="fit_mmrm" name="fit_mmrm_works_with_homogeneous_compound_symmetry_covariance_matrix"/>
    <testcase time="0.221" classname="fit_mmrm" name="fit_mmrm_works_with_heterogeneous_compound_symmetry_covariance_matrix"/>
  </testsuite>
  <testsuite name="formula" timestamp="2024-06-06T11:17:08Z" hostname="9b9e5411fcaa" tests="4" skipped="0" failures="0" errors="0" time="0.053">
    <testcase time="0.0300000000000002" classname="formula" name="build_formula_gives_error_message_if_incorrect_covariance_structure_is_given"/>
    <testcase time="0.00800000000000001" classname="formula" name="build_formula_builds_the_correct_formula"/>
    <testcase time="0.00699999999999967" classname="formula" name="build_formula_builds_the_correct_formula_with_no_arm_variable_given"/>
    <testcase time="0.00800000000000001" classname="formula" name="build_formula_builds_the_correct_formula_with_no_covariates_given"/>
  </testsuite>
  <testsuite name="g_mmrm" timestamp="2024-06-06T11:17:09Z" hostname="9b9e5411fcaa" tests="16" skipped="16" failures="0" errors="0" time="2.121">
    <testcase time="0.41" classname="g_mmrm" name="g_mmrm_diagnostic_works_well_with_defaults">
      <skipped message="Reason: On CI ('test-g_mmrm.R:29:3')"/>
    </testcase>
    <testcase time="0.0470000000000006" classname="g_mmrm" name="g_mmrm_diagnostic_works_well_for_Q_Q_residuals_plot">
      <skipped message="Reason: On CI ('test-g_mmrm.R:36:3')"/>
    </testcase>
    <testcase time="0.0389999999999997" classname="g_mmrm" name="g_mmrm_diagnostic_works_well_for_Q_Q_residuals_plot_with_z_threshold">
      <skipped message="Reason: On CI ('test-g_mmrm.R:43:3')"/>
    </testcase>
    <testcase time="0.217" classname="g_mmrm" name="g_mmrm_diagnostic_works_well_for_Q_Q_residuals_plot_with_weights">
      <skipped message="Reason: On CI ('test-g_mmrm.R:67:3')"/>
    </testcase>
    <testcase time="0.0430000000000001" classname="g_mmrm" name="g_mmrm_lsmeans_works_well_with_default_arguments">
      <skipped message="Reason: On CI ('test-g_mmrm.R:76:3')"/>
    </testcase>
    <testcase time="0.0179999999999998" classname="g_mmrm" name="g_mmrm_lsmeans_can_select_estimates_only">
      <skipped message="Reason: On CI ('test-g_mmrm.R:83:3')"/>
    </testcase>
    <testcase time="0.0730000000000004" classname="g_mmrm" name="g_mmrm_lsmeans_can_select_contrasts_only">
      <skipped message="Reason: On CI ('test-g_mmrm.R:90:3')"/>
    </testcase>
    <testcase time="0.0309999999999997" classname="g_mmrm" name="g_mmrm_lsmeans_works_well_with_constant_baseline_added">
      <skipped message="Reason: On CI ('test-g_mmrm.R:97:3')"/>
    </testcase>
    <testcase time="0.0259999999999998" classname="g_mmrm" name="g_mmrm_lsmeans_works_well_with_lines_added">
      <skipped message="Reason: On CI ('test-g_mmrm.R:104:3')"/>
    </testcase>
    <testcase time="0.024" classname="g_mmrm" name="g_mmrm_lsmeans_works_well_with_multiple_customizations">
      <skipped message="Reason: On CI ('test-g_mmrm.R:120:3')"/>
    </testcase>
    <testcase time="0.0190000000000001" classname="g_mmrm" name="g_mmrm_lsmeans_works_well_with_constant_baseline_and_no_arms">
      <skipped message="Reason: On CI ('test-g_mmrm.R:127:3')"/>
    </testcase>
    <testcase time="0.29" classname="g_mmrm" name="g_mmrm_lsmeans_plots_stats_table_for_estimates_as_expected">
      <skipped message="Reason: On CI ('test-g_mmrm.R:138:3')"/>
    </testcase>
    <testcase time="0.368" classname="g_mmrm" name="g_mmrm_lsmeans_plots_estimates_stats_table_with_custom_settings">
      <skipped message="Reason: On CI ('test-g_mmrm.R:163:3')"/>
    </testcase>
    <testcase time="0.153" classname="g_mmrm" name="g_mmrm_lsmeans_plots_estimates_stats_table_also_without_arms">
      <skipped message="Reason: On CI ('test-g_mmrm.R:174:3')"/>
    </testcase>
    <testcase time="0.209000000000001" classname="g_mmrm" name="g_mmrm_lsmeans_plots_estimates_stats_table_also_with_constant_baseline">
      <skipped message="Reason: On CI ('test-g_mmrm.R:187:3')"/>
    </testcase>
    <testcase time="0.154" classname="g_mmrm" name="g_mmrm_lsmeans_plots_estimates_stats_table_also_with_constant_baseline_and_without_arms">
      <skipped message="Reason: On CI ('test-g_mmrm.R:200:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="labels" timestamp="2024-06-06T11:17:10Z" hostname="9b9e5411fcaa" tests="10" skipped="0" failures="0" errors="0" time="0.059">
    <testcase time="0.0179999999999989" classname="labels" name="h_is_specified_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="labels" name="h_is_specified_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="labels" name="h_is_specified_works_as_expected"/>
    <testcase time="0.00200000000000067" classname="labels" name="h_is_specified_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="labels" name="h_is_specified_and_in_data_works_as_expected"/>
    <testcase time="0.00699999999999967" classname="labels" name="h_check_and_get_label_works_as_expected"/>
    <testcase time="0.00600000000000023" classname="labels" name="h_labels_works_as_expected"/>
    <testcase time="0.00500000000000078" classname="labels" name="h_labels_works_if_covariates_is_empty_vector"/>
    <testcase time="0.00300000000000011" classname="labels" name="h_labels_works_if_covariates_is_empty_vector"/>
    <testcase time="0.00599999999999845" classname="labels" name="h_labels_works_as_expected_also_with_weights"/>
  </testsuite>
  <testsuite name="lsmeans" timestamp="2024-06-06T11:17:10Z" hostname="9b9e5411fcaa" tests="49" skipped="6" failures="0" errors="0" time="1.756">
    <testcase time="0.077" classname="lsmeans" name="h_get_emmeans_res_works_as_expected"/>
    <testcase time="0.00199999999999889" classname="lsmeans" name="h_get_emmeans_res_works_as_expected"/>
    <testcase time="0.00200000000000067" classname="lsmeans" name="h_get_emmeans_res_works_as_expected"/>
    <testcase time="0.000999999999999446" classname="lsmeans" name="h_get_emmeans_res_works_as_expected"/>
    <testcase time="0.00200000000000067" classname="lsmeans" name="h_get_emmeans_res_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="lsmeans" name="h_get_emmeans_res_works_as_expected"/>
    <testcase time="0.0170000000000012" classname="lsmeans" name="h_get_emmeans_res_works_as_expected"/>
    <testcase time="0.0949999999999989" classname="lsmeans" name="h_get_emmeans_res_works_as_expected_without_arm_variable"/>
    <testcase time="0.00200000000000067" classname="lsmeans" name="h_get_emmeans_res_works_as_expected_without_arm_variable"/>
    <testcase time="0.00199999999999889" classname="lsmeans" name="h_get_emmeans_res_works_as_expected_without_arm_variable"/>
    <testcase time="0.00200000000000067" classname="lsmeans" name="h_get_emmeans_res_works_as_expected_without_arm_variable"/>
    <testcase time="0.00200000000000067" classname="lsmeans" name="h_get_emmeans_res_works_as_expected_without_arm_variable"/>
    <testcase time="0.00499999999999901" classname="lsmeans" name="h_get_emmeans_res_works_as_expected_without_arm_variable"/>
    <testcase time="0.0890000000000004" classname="lsmeans" name="h_get_average_visit_specs_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="lsmeans" name="h_get_average_visit_specs_works_as_expected"/>
    <testcase time="0.093" classname="lsmeans" name="h_get_average_visit_specs_gives_error_if_not_all_visits_are_correct"/>
    <testcase time="0.0890000000000004" classname="lsmeans" name="h_get_average_visit_specs_works_as_expected_without_arm"/>
    <testcase time="0.00399999999999956" classname="lsmeans" name="h_get_average_visit_specs_works_as_expected_without_arm"/>
    <testcase time="0.00600000000000023" classname="lsmeans" name="h_get_average_visit_specs_uses_number_of_patients_with_any_of_the_averaged_visits_as_n">
      <skipped message="Reason: On CI ('test-lsmeans.R:178:3')"/>
    </testcase>
    <testcase time="0.102" classname="lsmeans" name="h_get_spec_visit_estimates_works_as_expected"/>
    <testcase time="0.0120000000000005" classname="lsmeans" name="h_get_spec_visit_estimates_works_as_expected"/>
    <testcase time="0.106" classname="lsmeans" name="h_get_spec_visit_estimates_produces_test_results_optionally"/>
    <testcase time="0.0149999999999988" classname="lsmeans" name="h_get_spec_visit_estimates_produces_test_results_optionally"/>
    <testcase time="0.0890000000000004" classname="lsmeans" name="h_get_spec_visit_estimates_works_without_arm"/>
    <testcase time="0.0190000000000001" classname="lsmeans" name="h_get_spec_visit_estimates_works_without_arm">
      <skipped message="Reason: On CRAN ('test-lsmeans.R:300:3')"/>
    </testcase>
    <testcase time="0.107000000000001" classname="lsmeans" name="h_get_single_visit_estimates_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="lsmeans" name="h_get_single_visit_estimates_works_as_expected">
      <skipped message="Reason: On CRAN ('test-lsmeans.R:311:3')"/>
    </testcase>
    <testcase time="0.109" classname="lsmeans" name="h_get_single_visit_estimates_works_without_arm"/>
    <testcase time="0.00499999999999901" classname="lsmeans" name="h_get_single_visit_estimates_works_without_arm">
      <skipped message="Reason: On CRAN ('test-lsmeans.R:320:3')"/>
    </testcase>
    <testcase time="0.113000000000001" classname="lsmeans" name="h_get_relative_reduc_df_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="lsmeans" name="h_get_relative_reduc_df_works_as_expected">
      <skipped message="Reason: On CRAN ('test-lsmeans.R:335:3')"/>
    </testcase>
    <testcase time="0.100999999999999" classname="lsmeans" name="h_single_visit_contrast_specs_works_as_expected"/>
    <testcase time="0.00400000000000134" classname="lsmeans" name="h_single_visit_contrast_specs_works_as_expected"/>
    <testcase time="0.0879999999999992" classname="lsmeans" name="h_average_visit_contrast_specs_works_as_expected"/>
    <testcase time="0.00399999999999956" classname="lsmeans" name="h_average_visit_contrast_specs_works_as_expected"/>
    <testcase time="0.0080000000000009" classname="lsmeans" name="h_average_visit_contrast_specs_works_also_for_3_arms_and_many_visits"/>
    <testcase time="0.00399999999999956" classname="lsmeans" name="h_average_visit_contrast_specs_works_also_for_3_arms_and_many_visits"/>
    <testcase time="0.140000000000001" classname="lsmeans" name="get_mmrm_lsmeans_can_calculate_the_LS_mean_results"/>
    <testcase time="0.00199999999999889" classname="lsmeans" name="get_mmrm_lsmeans_can_calculate_the_LS_mean_results"/>
    <testcase time="0.00200000000000067" classname="lsmeans" name="get_mmrm_lsmeans_can_calculate_the_LS_mean_results"/>
    <testcase time="0.00200000000000067" classname="lsmeans" name="get_mmrm_lsmeans_can_calculate_the_LS_mean_results"/>
    <testcase time="0.00399999999999956" classname="lsmeans" name="get_mmrm_lsmeans_can_calculate_the_LS_mean_results"/>
    <testcase time="0.00399999999999956" classname="lsmeans" name="get_mmrm_lsmeans_can_calculate_the_LS_mean_results"/>
    <testcase time="0.0990000000000002" classname="lsmeans" name="get_mmrm_lsmeans_preserves_combined_arm_levels."/>
    <testcase time="0.00500000000000078" classname="lsmeans" name="get_mmrm_lsmeans_preserves_combined_arm_levels."/>
    <testcase time="0.097999999999999" classname="lsmeans" name="get_mmrm_lsmeans_works_without_arm"/>
    <testcase time="0.00200000000000067" classname="lsmeans" name="get_mmrm_lsmeans_works_without_arm"/>
    <testcase time="0.00199999999999889" classname="lsmeans" name="get_mmrm_lsmeans_works_without_arm"/>
    <testcase time="0.00400000000000134" classname="lsmeans" name="get_mmrm_lsmeans_works_without_arm">
      <skipped message="Reason: On CRAN ('test-lsmeans.R:648:3')"/>
    </testcase>
  </testsuite>
  <testsuite name="subgroups" timestamp="2024-06-06T11:17:12Z" hostname="9b9e5411fcaa" tests="11" skipped="4" failures="0" errors="2" time="3.721">
    <testcase time="0.282999999999999" classname="subgroups" name="h_mmrm_subgroup_df_works_as_expected_for_overall_group"/>
    <testcase time="0.0150000000000006" classname="subgroups" name="h_mmrm_subgroup_df_works_as_expected_for_subgroup_when_fit_did_not_converge"/>
    <testcase time="0.773999999999999" classname="subgroups" name="extract_mmrm_subgroups_works_as_expected">
      <skipped message="Reason: On CRAN ('test-subgroups.R:110:3')"/>
    </testcase>
    <testcase time="0.0220000000000002" classname="subgroups" name="extract_mmrm_subgroups_works_as_expected_without_subgroup_variables">
      <skipped message="Reason: On CRAN ('test-subgroups.R:118:3')"/>
    </testcase>
    <testcase time="0.388999999999999" classname="subgroups" name="extract_mmrm_subgroups_works_as_expected_with_groups_lists">
      <skipped message="Reason: On CRAN ('test-subgroups.R:131:3')"/>
    </testcase>
    <testcase time="0.768000000000001" classname="subgroups" name="extract_mmrm_subgroups_works_when_model_does_not_work_for_some_subgroups"/>
    <testcase time="0.00399999999999956" classname="subgroups" name="extract_mmrm_subgroups_works_when_model_does_not_work_for_some_subgroups">
      <skipped message="Reason: On CRAN ('test-subgroups.R:140:3')"/>
    </testcase>
    <testcase time="0.0180000000000007" classname="subgroups" name="a_mmrm_subgroups_works_as_expected"/>
    <testcase time="0.00200000000000067" classname="subgroups" name="a_mmrm_subgroups_works_as_expected"/>
    <testcase time="0.982999999999999" classname="subgroups" name="tabulate_mmrm_subgroups_works_as_expected">
      <error type="error" message="Error in `nlines(strsplit(s, &quot;\n&quot;, fixed = TRUE), max_width = w)`: argument &quot;fontspec&quot; is missing, with no default ('test-subgroups.R:160:3')">Error in `nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)`: argument "fontspec" is missing, with no default
Backtrace:
     x
  1. +-basic_table() %&gt;% tabulate_mmrm_subgroups(df) at test-subgroups.R:160:3
  2. \-tern.mmrm::tabulate_mmrm_subgroups(., df)
  3.   \-rtables::build_table(lyt_estimates, df = df$estimates)
  4.     \-rtables::update_ref_indexing(tab)
  5.       +-formatters::make_row_df(tt)
  6.       \-rtables::make_row_df(tt)
  7.         \-rtables (local) .local(...)
  8.           +-formatters::make_row_df(...)
  9.           \-rtables::make_row_df(...)
 10.             \-rtables (local) .local(...)
 11.               +-formatters::make_row_df(...)
 12.               \-rtables::make_row_df(...)
 13.                 \-rtables (local) .local(...)
 14.                   +-formatters::make_row_df(...)
 15.                   \-rtables::make_row_df(...)
 16.                     \-rtables (local) .local(...)
 17.                       +-formatters::make_row_df(...)
 18.                       \-rtables::make_row_df(...)
 19.                         \-rtables (local) .local(...)
 20.                           +-formatters::pagdfrow(...)
 21.                           | \-base::data.frame(...)
 22.                           +-formatters::nlines(tt, colwidths = colwidths, max_width = max_width)
 23.                           \-rtables::nlines(tt, colwidths = colwidths, max_width = max_width)
 24.                             \-rtables (local) .local(x, colwidths, max_width)
 25.                               +-base::unlist(...)
 26.                               \-base::mapply(...)
 27.                                 \-rtables (local) `&lt;fn&gt;`(s = dots[[1L]][[1L]], w = dots[[2L]][[1L]])
 28.                                   +-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 29.                                   \-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 30.                                     +-base::unlist(...)
 31.                                     \-base::vapply(...)
 32.                                       +-formatters (local) FUN(X[[i]], ...)
 33.                                       \-formatters (local) FUN(X[[i]], ...)
 34.                                         \-base::vapply(...)
 35.                                           \-formatters (local) FUN(X[[i]], ...)
 36.                                             \-formatters::wrap_txt(xi, max_width, fontspec = fontspec)
 37.                                               \-formatters::open_font_dev(fontspec)</error>
    </testcase>
    <testcase time="0.463000000000001" classname="subgroups" name="tabulate_mmrm_subgroups_with_custom_settings_works_as_expected">
      <error type="error" message="Error in `nlines(strsplit(s, &quot;\n&quot;, fixed = TRUE), max_width = w)`: argument &quot;fontspec&quot; is missing, with no default ('test-subgroups.R:178:3')">Error in `nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)`: argument "fontspec" is missing, with no default
Backtrace:
     x
  1. +-basic_table() %&gt;% ... at test-subgroups.R:178:3
  2. \-tern.mmrm::tabulate_mmrm_subgroups(...)
  3.   \-rtables::build_table(lyt_contrasts, df = df$contrasts)
  4.     \-rtables::update_ref_indexing(tab)
  5.       +-formatters::make_row_df(tt)
  6.       \-rtables::make_row_df(tt)
  7.         \-rtables (local) .local(...)
  8.           +-formatters::make_row_df(...)
  9.           \-rtables::make_row_df(...)
 10.             \-rtables (local) .local(...)
 11.               +-formatters::make_row_df(...)
 12.               \-rtables::make_row_df(...)
 13.                 \-rtables (local) .local(...)
 14.                   +-formatters::make_row_df(...)
 15.                   \-rtables::make_row_df(...)
 16.                     \-rtables (local) .local(...)
 17.                       +-formatters::make_row_df(...)
 18.                       \-rtables::make_row_df(...)
 19.                         \-rtables (local) .local(...)
 20.                           +-formatters::pagdfrow(...)
 21.                           | \-base::data.frame(...)
 22.                           +-formatters::nlines(tt, colwidths = colwidths, max_width = max_width)
 23.                           \-rtables::nlines(tt, colwidths = colwidths, max_width = max_width)
 24.                             \-rtables (local) .local(x, colwidths, max_width)
 25.                               +-base::unlist(...)
 26.                               \-base::mapply(...)
 27.                                 \-rtables (local) `&lt;fn&gt;`(s = dots[[1L]][[1L]], w = dots[[2L]][[1L]])
 28.                                   +-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 29.                                   \-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 30.                                     +-base::unlist(...)
 31.                                     \-base::vapply(...)
 32.                                       +-formatters (local) FUN(X[[i]], ...)
 33.                                       \-formatters (local) FUN(X[[i]], ...)
 34.                                         \-base::vapply(...)
 35.                                           \-formatters (local) FUN(X[[i]], ...)
 36.                                             \-formatters::wrap_txt(xi, max_width, fontspec = fontspec)
 37.                                               \-formatters::open_font_dev(fontspec)</error>
    </testcase>
  </testsuite>
  <testsuite name="table_mmrmt01" timestamp="2024-06-06T11:17:16Z" hostname="9b9e5411fcaa" tests="4" skipped="0" failures="0" errors="4" time="0.788">
    <testcase time="0.462" classname="table_mmrmt01" name="LS_means_table_is_produced_correctly">
      <error type="error" message="Error in `nlines(strsplit(s, &quot;\n&quot;, fixed = TRUE), max_width = w)`: argument &quot;fontspec&quot; is missing, with no default ('test-table_mmrmt01.R:22:3')">Error in `nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)`: argument "fontspec" is missing, with no default
Backtrace:
     x
  1. +-... %&gt;% build_table(df, alt_counts_df = mmrm_test_data) at test-table_mmrmt01.R:22:3
  2. \-rtables::build_table(., df, alt_counts_df = mmrm_test_data)
  3.   \-rtables::update_ref_indexing(tab)
  4.     +-formatters::make_row_df(tt)
  5.     \-rtables::make_row_df(tt)
  6.       \-rtables (local) .local(...)
  7.         +-formatters::make_row_df(...)
  8.         \-rtables::make_row_df(...)
  9.           \-rtables (local) .local(...)
 10.             +-formatters::make_row_df(...)
 11.             \-rtables::make_row_df(...)
 12.               \-rtables (local) .local(...)
 13.                 +-formatters::make_row_df(...)
 14.                 \-rtables::make_row_df(...)
 15.                   \-rtables (local) .local(...)
 16.                     +-formatters::pagdfrow(...)
 17.                     | \-base::data.frame(...)
 18.                     +-formatters::nlines(tt, colwidths = colwidths, max_width = max_width)
 19.                     \-rtables::nlines(tt, colwidths = colwidths, max_width = max_width)
 20.                       \-rtables (local) .local(x, colwidths, max_width)
 21.                         +-base::unlist(...)
 22.                         \-base::mapply(...)
 23.                           \-rtables (local) `&lt;fn&gt;`(s = dots[[1L]][[1L]], w = dots[[2L]][[1L]])
 24.                             +-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 25.                             \-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 26.                               +-base::unlist(...)
 27.                               \-base::vapply(...)
 28.                                 +-formatters (local) FUN(X[[i]], ...)
 29.                                 \-formatters (local) FUN(X[[i]], ...)
 30.                                   \-base::vapply(...)
 31.                                     \-formatters (local) FUN(X[[i]], ...)
 32.                                       \-formatters::wrap_txt(xi, max_width, fontspec = fontspec)
 33.                                         \-formatters::open_font_dev(fontspec)</error>
    </testcase>
    <testcase time="0.199" classname="table_mmrmt01" name="Fixed_effects_table_is_produced_correctly">
      <error type="error" message="Error in `h(simpleError(msg, call))`: error in evaluating the argument 'x' in selecting a method for function 'toString': argument &quot;fontspec&quot; is missing, with no default ('test-table_mmrmt01.R:46:3')">Error in `h(simpleError(msg, call))`: error in evaluating the argument 'x' in selecting a method for function 'toString': argument "fontspec" is missing, with no default
Backtrace:
    x
 1. \-testthat::expect_snapshot(result) at test-table_mmrmt01.R:46:3
 2.   \-rlang::cnd_signal(state$error)</error>
    </testcase>
    <testcase time="0.077" classname="table_mmrmt01" name="Covariance_matrix_table_is_produced_correctly">
      <error type="error" message="Error in `h(simpleError(msg, call))`: error in evaluating the argument 'x' in selecting a method for function 'toString': argument &quot;fontspec&quot; is missing, with no default ('test-table_mmrmt01.R:51:3')">Error in `h(simpleError(msg, call))`: error in evaluating the argument 'x' in selecting a method for function 'toString': argument "fontspec" is missing, with no default
Backtrace:
    x
 1. \-testthat::expect_snapshot(result) at test-table_mmrmt01.R:51:3
 2.   \-rlang::cnd_signal(state$error)</error>
    </testcase>
    <testcase time="0.0500000000000007" classname="table_mmrmt01" name="Model_diagnostics_table_is_produced_correctly">
      <error type="error" message="Error in `nlines(strsplit(s, &quot;\n&quot;, fixed = TRUE), max_width = w)`: argument &quot;fontspec&quot; is missing, with no default ('test-table_mmrmt01.R:55:3')">Error in `nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)`: argument "fontspec" is missing, with no default
Backtrace:
     x
  1. +-tern::as.rtable(mmrm_results, type = "diagnostic", format = "xx.xx") at test-table_mmrmt01.R:55:3
  2. \-tern.mmrm:::as.rtable.tern_mmrm(...)
  3.   \-tern.mmrm::h_mmrm_diagnostic(x, ...)
  4.     \-rtables::build_table(lyt, df)
  5.       \-rtables::update_ref_indexing(tab)
  6.         +-formatters::make_row_df(tt)
  7.         \-rtables::make_row_df(tt)
  8.           \-rtables (local) .local(...)
  9.             +-formatters::make_row_df(...)
 10.             \-rtables::make_row_df(...)
 11.               \-rtables (local) .local(...)
 12.                 +-formatters::pagdfrow(...)
 13.                 | \-base::data.frame(...)
 14.                 +-formatters::nlines(tt, colwidths = colwidths, max_width = max_width)
 15.                 \-rtables::nlines(tt, colwidths = colwidths, max_width = max_width)
 16.                   \-rtables (local) .local(x, colwidths, max_width)
 17.                     +-base::unlist(...)
 18.                     \-base::mapply(...)
 19.                       \-rtables (local) `&lt;fn&gt;`(s = dots[[1L]][[1L]], w = dots[[2L]][[1L]])
 20.                         +-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 21.                         \-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 22.                           +-base::unlist(...)
 23.                           \-base::vapply(...)
 24.                             +-formatters (local) FUN(X[[i]], ...)
 25.                             \-formatters (local) FUN(X[[i]], ...)
 26.                               \-base::vapply(...)
 27.                                 \-formatters (local) FUN(X[[i]], ...)
 28.                                   \-formatters::wrap_txt(xi, max_width, fontspec = fontspec)
 29.                                     \-formatters::open_font_dev(fontspec)</error>
    </testcase>
  </testsuite>
  <testsuite name="tabulate_mmrm" timestamp="2024-06-06T11:17:17Z" hostname="9b9e5411fcaa" tests="35" skipped="0" failures="0" errors="6" time="2.528">
    <testcase time="0.271999999999998" classname="tabulate_mmrm" name="h_mmrm_fixed_works_as_expected"/>
    <testcase time="0.0180000000000007" classname="tabulate_mmrm" name="h_mmrm_fixed_works_as_expected">
      <error type="error" message="Error in `h(simpleError(msg, call))`: error in evaluating the argument 'x' in selecting a method for function 'toString': argument &quot;fontspec&quot; is missing, with no default ('test-tabulate_mmrm.R:262:3')">Error in `h(simpleError(msg, call))`: error in evaluating the argument 'x' in selecting a method for function 'toString': argument "fontspec" is missing, with no default
Backtrace:
    x
 1. \-testthat::expect_snapshot(result) at test-tabulate_mmrm.R:262:3
 2.   \-rlang::cnd_signal(state$error)</error>
    </testcase>
    <testcase time="0.182" classname="tabulate_mmrm" name="h_mmrm_cov_works_as_expected"/>
    <testcase time="0.0190000000000001" classname="tabulate_mmrm" name="h_mmrm_cov_works_as_expected">
      <error type="error" message="Error in `h(simpleError(msg, call))`: error in evaluating the argument 'x' in selecting a method for function 'toString': argument &quot;fontspec&quot; is missing, with no default ('test-tabulate_mmrm.R:268:3')">Error in `h(simpleError(msg, call))`: error in evaluating the argument 'x' in selecting a method for function 'toString': argument "fontspec" is missing, with no default
Backtrace:
    x
 1. \-testthat::expect_snapshot(result) at test-tabulate_mmrm.R:268:3
 2.   \-rlang::cnd_signal(state$error)</error>
    </testcase>
    <testcase time="0.190999999999999" classname="tabulate_mmrm" name="h_mmrm_diagnostic_works_as_expected">
      <error type="error" message="Error in `nlines(strsplit(s, &quot;\n&quot;, fixed = TRUE), max_width = w)`: argument &quot;fontspec&quot; is missing, with no default ('test-tabulate_mmrm.R:273:3')">Error in `nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)`: argument "fontspec" is missing, with no default
Backtrace:
     x
  1. +-testthat::expect_silent(h_mmrm_diagnostic(mmrm, format = "xx.x")) at test-tabulate_mmrm.R:273:3
  2. | \-testthat:::quasi_capture(enquo(object), NULL, evaluate_promise)
  3. |   +-testthat (local) .capture(...)
  4. |   | +-withr::with_output_sink(...)
  5. |   | | \-base::force(code)
  6. |   | +-base::withCallingHandlers(...)
  7. |   | \-base::withVisible(code)
  8. |   \-rlang::eval_bare(quo_get_expr(.quo), quo_get_env(.quo))
  9. \-tern.mmrm::h_mmrm_diagnostic(mmrm, format = "xx.x")
 10.   \-rtables::build_table(lyt, df)
 11.     \-rtables::update_ref_indexing(tab)
 12.       +-formatters::make_row_df(tt)
 13.       \-rtables::make_row_df(tt)
 14.         \-rtables (local) .local(...)
 15.           +-formatters::make_row_df(...)
 16.           \-rtables::make_row_df(...)
 17.             \-rtables (local) .local(...)
 18.               +-formatters::pagdfrow(...)
 19.               | \-base::data.frame(...)
 20.               +-formatters::nlines(tt, colwidths = colwidths, max_width = max_width)
 21.               \-rtables::nlines(tt, colwidths = colwidths, max_width = max_width)
 22.                 \-rtables (local) .local(x, colwidths, max_width)
 23.                   +-base::unlist(...)
 24.                   \-base::mapply(...)
 25.                     \-rtables (local) `&lt;fn&gt;`(s = dots[[1L]][[1L]], w = dots[[2L]][[1L]])
 26.                       +-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 27.                       \-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 28.                         +-base::unlist(...)
 29.                         \-base::vapply(...)
 30.                           +-formatters (local) FUN(X[[i]], ...)
 31.                           \-formatters (local) FUN(X[[i]], ...)
 32.                             \-base::vapply(...)
 33.                               \-formatters (local) FUN(X[[i]], ...)
 34.                                 \-formatters::wrap_txt(xi, max_width, fontspec = fontspec)
 35.                                   \-formatters::open_font_dev(fontspec)</error>
    </testcase>
    <testcase time="0.190000000000001" classname="tabulate_mmrm" name="tidy.mmrm_works_as_expected"/>
    <testcase time="0.00199999999999889" classname="tabulate_mmrm" name="tidy.mmrm_works_as_expected"/>
    <testcase time="0.093" classname="tabulate_mmrm" name="tidy.mmrm_works_as_expected_when_treatment_is_not_considered_in_the_model"/>
    <testcase time="0.00200000000000067" classname="tabulate_mmrm" name="tidy.mmrm_works_as_expected_when_treatment_is_not_considered_in_the_model"/>
    <testcase time="0.179" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.000999999999999446" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.00399999999999956" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.00200000000000067" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.00200000000000067" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.00299999999999834" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.00200000000000067" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.000999999999999446" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.00400000000000134" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.000999999999999446" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.00300000000000011" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.000999999999999446" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_not_in_reference_column"/>
    <testcase time="0.154" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_in_reference_column"/>
    <testcase time="0.00200000000000067" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_in_reference_column"/>
    <testcase time="0.00399999999999956" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_in_reference_column"/>
    <testcase time="0.00200000000000067" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_in_reference_column"/>
    <testcase time="0.00199999999999889" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_in_reference_column"/>
    <testcase time="0.00300000000000011" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_in_reference_column"/>
    <testcase time="0.00400000000000134" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_in_reference_column"/>
    <testcase time="0.00300000000000011" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_in_reference_column"/>
    <testcase time="0.00299999999999834" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_in_reference_column"/>
    <testcase time="0.00300000000000011" classname="tabulate_mmrm" name="s_mmrm_lsmeans_works_as_expected_when_in_reference_column"/>
    <testcase time="0.0910000000000011" classname="tabulate_mmrm" name="s_mmrm_lsmeans_single_works_as_expected"/>
    <testcase time="0.347000000000001" classname="tabulate_mmrm" name="summarize_lsmeans_works_as_expected">
      <error type="error" message="Error in `nlines(strsplit(s, &quot;\n&quot;, fixed = TRUE), max_width = w)`: argument &quot;fontspec&quot; is missing, with no default ('test-tabulate_mmrm.R:360:3')">Error in `nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)`: argument "fontspec" is missing, with no default
Backtrace:
     x
  1. +-... %&gt;% build_table(df) at test-tabulate_mmrm.R:360:3
  2. \-rtables::build_table(., df)
  3.   \-rtables::update_ref_indexing(tab)
  4.     +-formatters::make_row_df(tt)
  5.     \-rtables::make_row_df(tt)
  6.       \-rtables (local) .local(...)
  7.         +-formatters::make_row_df(...)
  8.         \-rtables::make_row_df(...)
  9.           \-rtables (local) .local(...)
 10.             +-formatters::make_row_df(...)
 11.             \-rtables::make_row_df(...)
 12.               \-rtables (local) .local(...)
 13.                 +-formatters::make_row_df(...)
 14.                 \-rtables::make_row_df(...)
 15.                   \-rtables (local) .local(...)
 16.                     +-formatters::pagdfrow(...)
 17.                     | \-base::data.frame(...)
 18.                     +-formatters::nlines(tt, colwidths = colwidths, max_width = max_width)
 19.                     \-rtables::nlines(tt, colwidths = colwidths, max_width = max_width)
 20.                       \-rtables (local) .local(x, colwidths, max_width)
 21.                         +-base::unlist(...)
 22.                         \-base::mapply(...)
 23.                           \-rtables (local) `&lt;fn&gt;`(s = dots[[1L]][[1L]], w = dots[[2L]][[1L]])
 24.                             +-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 25.                             \-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 26.                               +-base::unlist(...)
 27.                               \-base::vapply(...)
 28.                                 +-formatters (local) FUN(X[[i]], ...)
 29.                                 \-formatters (local) FUN(X[[i]], ...)
 30.                                   \-base::vapply(...)
 31.                                     \-formatters (local) FUN(X[[i]], ...)
 32.                                       \-formatters::wrap_txt(xi, max_width, fontspec = fontspec)
 33.                                         \-formatters::open_font_dev(fontspec)</error>
    </testcase>
    <testcase time="0.283999999999999" classname="tabulate_mmrm" name="summarize_lsmeans_works_as_expected_when_treatment_is_not_considered_in_the_model">
      <error type="error" message="Error in `nlines(strsplit(s, &quot;\n&quot;, fixed = TRUE), max_width = w)`: argument &quot;fontspec&quot; is missing, with no default ('test-tabulate_mmrm.R:382:3')">Error in `nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)`: argument "fontspec" is missing, with no default
Backtrace:
     x
  1. +-... %&gt;% build_table(df) at test-tabulate_mmrm.R:382:3
  2. \-rtables::build_table(., df)
  3.   \-rtables::update_ref_indexing(tab)
  4.     +-formatters::make_row_df(tt)
  5.     \-rtables::make_row_df(tt)
  6.       \-rtables (local) .local(...)
  7.         +-formatters::make_row_df(...)
  8.         \-rtables::make_row_df(...)
  9.           \-rtables (local) .local(...)
 10.             +-formatters::make_row_df(...)
 11.             \-rtables::make_row_df(...)
 12.               \-rtables (local) .local(...)
 13.                 +-formatters::make_row_df(...)
 14.                 \-rtables::make_row_df(...)
 15.                   \-rtables (local) .local(...)
 16.                     +-formatters::pagdfrow(...)
 17.                     | \-base::data.frame(...)
 18.                     +-formatters::nlines(tt, colwidths = colwidths, max_width = max_width)
 19.                     \-rtables::nlines(tt, colwidths = colwidths, max_width = max_width)
 20.                       \-rtables (local) .local(x, colwidths, max_width)
 21.                         +-base::unlist(...)
 22.                         \-base::mapply(...)
 23.                           \-rtables (local) `&lt;fn&gt;`(s = dots[[1L]][[1L]], w = dots[[2L]][[1L]])
 24.                             +-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 25.                             \-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 26.                               +-base::unlist(...)
 27.                               \-base::vapply(...)
 28.                                 +-formatters (local) FUN(X[[i]], ...)
 29.                                 \-formatters (local) FUN(X[[i]], ...)
 30.                                   \-base::vapply(...)
 31.                                     \-formatters (local) FUN(X[[i]], ...)
 32.                                       \-formatters::wrap_txt(xi, max_width, fontspec = fontspec)
 33.                                         \-formatters::open_font_dev(fontspec)</error>
    </testcase>
    <testcase time="0.454000000000001" classname="tabulate_mmrm" name="summarize_lsmeans_works_with_averages_of_visits_as_expected">
      <error type="error" message="Error in `nlines(strsplit(s, &quot;\n&quot;, fixed = TRUE), max_width = w)`: argument &quot;fontspec&quot; is missing, with no default ('test-tabulate_mmrm.R:420:3')">Error in `nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)`: argument "fontspec" is missing, with no default
Backtrace:
     x
  1. +-... %&gt;% build_table(df) at test-tabulate_mmrm.R:420:3
  2. \-rtables::build_table(., df)
  3.   \-rtables::update_ref_indexing(tab)
  4.     +-formatters::make_row_df(tt)
  5.     \-rtables::make_row_df(tt)
  6.       \-rtables (local) .local(...)
  7.         +-formatters::make_row_df(...)
  8.         \-rtables::make_row_df(...)
  9.           \-rtables (local) .local(...)
 10.             +-formatters::make_row_df(...)
 11.             \-rtables::make_row_df(...)
 12.               \-rtables (local) .local(...)
 13.                 +-formatters::make_row_df(...)
 14.                 \-rtables::make_row_df(...)
 15.                   \-rtables (local) .local(...)
 16.                     +-formatters::pagdfrow(...)
 17.                     | \-base::data.frame(...)
 18.                     +-formatters::nlines(tt, colwidths = colwidths, max_width = max_width)
 19.                     \-rtables::nlines(tt, colwidths = colwidths, max_width = max_width)
 20.                       \-rtables (local) .local(x, colwidths, max_width)
 21.                         +-base::unlist(...)
 22.                         \-base::mapply(...)
 23.                           \-rtables (local) `&lt;fn&gt;`(s = dots[[1L]][[1L]], w = dots[[2L]][[1L]])
 24.                             +-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 25.                             \-formatters::nlines(strsplit(s, "\n", fixed = TRUE), max_width = w)
 26.                               +-base::unlist(...)
 27.                               \-base::vapply(...)
 28.                                 +-formatters (local) FUN(X[[i]], ...)
 29.                                 \-formatters (local) FUN(X[[i]], ...)
 30.                                   \-base::vapply(...)
 31.                                     \-formatters (local) FUN(X[[i]], ...)
 32.                                       \-formatters::wrap_txt(xi, max_width, fontspec = fontspec)
 33.                                         \-formatters::open_font_dev(fontspec)</error>
    </testcase>
  </testsuite>
  <testsuite name="utils" timestamp="2024-06-06T11:17:19Z" hostname="9b9e5411fcaa" tests="5" skipped="0" failures="0" errors="0" time="0.111">
    <testcase time="0.100000000000001" classname="utils" name="h_get_covariate_parts_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="utils" name="h_get_covariate_parts_works_as_expected"/>
    <testcase time="0.00199999999999889" classname="utils" name="h_get_covariate_parts_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="utils" name="h_get_covariate_parts_works_as_expected"/>
    <testcase time="0.00300000000000011" classname="utils" name="h_get_covariate_parts_works_as_expected"/>
  </testsuite>
  <testsuite name="covariance_plot" timestamp="2024-06-06T11:17:19Z" hostname="9b9e5411fcaa" tests="13" skipped="3" failures="0" errors="0" time="0.165">
    <testcase time="0.00700000000000145" classname="covariance_plot" name="h_get_timepoint_vars_works_in_simple_example"/>
    <testcase time="0.00199999999999889" classname="covariance_plot" name="h_get_timepoint_vars_works_in_simple_example"/>
    <testcase time="0.0770000000000017" classname="covariance_plot" name="h_get_timepoint_vars_works_as_expected_with_time_prefix_specified"/>
    <testcase time="0.00999999999999801" classname="covariance_plot" name="h_get_timepoint_vars_returns_error_when_time_prefix_not_specified"/>
    <testcase time="0.00900000000000034" classname="covariance_plot" name="h_get_timepoint_vars_works_as_expected_with_time_prefix_argument_not_needed"/>
    <testcase time="0.00700000000000145" classname="covariance_plot" name="h_vectorization_works_as_expected_with_time_prefix_specified"/>
    <testcase time="0.0069999999999979" classname="covariance_plot" name="h_vectorization_works_as_expected_when_time_prefix_not_specified"/>
    <testcase time="0.00900000000000034" classname="covariance_plot" name="g_covariance_works_as_expected_as_expected_with_defaults"/>
    <testcase time="0.00199999999999889" classname="covariance_plot" name="g_covariance_works_as_expected_as_expected_with_defaults">
      <skipped message="Reason: On CI ('test_covariance_plot.R:108:3')"/>
    </testcase>
    <testcase time="0.0160000000000018" classname="covariance_plot" name="g_covariance_works_as_expected_as_expected_with_time_prefix_specified"/>
    <testcase time="0.00100000000000122" classname="covariance_plot" name="g_covariance_works_as_expected_as_expected_with_time_prefix_specified">
      <skipped message="Reason: On CI ('test_covariance_plot.R:123:3')"/>
    </testcase>
    <testcase time="0.0169999999999995" classname="covariance_plot" name="g_covariance_works_as_expected_as_expected_with_time_difference"/>
    <testcase time="0.000999999999997669" classname="covariance_plot" name="g_covariance_works_as_expected_as_expected_with_time_difference">
      <skipped message="Reason: On CI ('test_covariance_plot.R:138:3')"/>
    </testcase>
  </testsuite>
</testsuites>
